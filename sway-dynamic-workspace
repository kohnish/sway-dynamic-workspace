#!/usr/bin/env python3
from dataclasses import dataclass, field
import json
import subprocess
import os
import sys


HELLO_WAYLAND_WINDOW_NAME = "blank"


@dataclass
class Workspace:
    pass


@dataclass
class Node:
    workspace: Workspace
    id: int = -1
    name: str = ""
    window_name: str = ""
    hidden: bool = False
    width: int = -1
    height: int = -1
    max_width: int = -1
    max_height: int = -1
    pos_y: int = -1
    floating: bool = False
    tiled: bool = False


@dataclass
class Workspace:
    id: int = -1
    nodes: list[Node] = field(default_factory=list)
    tiled_nodes: list[Node] = field(default_factory=list)
    hello_wayland_id: int = -1


@dataclass
class NodeInfo:
    curr_node: Node = field(default_factory=lambda: Node(Workspace()))
    nodes: list[Node] = field(default_factory=list)
    tiled_nodes: list[Node] = field(default_factory=list)
    hidden_nodes: list[Node] = field(default_factory=list)
    workspaces: list[Workspace] = field(default_factory=list)


def debug_log(msg):
    os.system("logger sway-dynamic-workspace: DEBUG: {0}".format(msg))


def assert_with_log(cond, msg="Assertion failed"):
    if not cond:
        os.system("logger sway-dynamic-workspace: ERROR: AssertionError: {0}".format(msg))
        raise AssertionError(msg)


def app_name_from_node(node):
    app_name = ""
    if node.get("app_id"):
        app_name = node["app_id"]
    elif node.get("window_properties"):
        app_name = node["window_properties"]["class"]
    assert_with_log(app_name != "", "App name must be set")
    return app_name


def win_name_from_node(node, fallback):
    app_name = node.get("name")
    if not app_name or app_name == "":
        return fallback
    return app_name


def create_node(node, workspace, max_width=-1, max_height=-1):
    app_name = app_name_from_node(node)
    win_name = win_name_from_node(node, app_name)
    node_id = node["id"]
    width = node["rect"]["width"]
    height = node["rect"]["height"]
    if workspace.id == -1:
        return Node(workspace, id=node_id, name=app_name, window_name=win_name, hidden=True)
    else:
        y = node["rect"]["y"]
        floating = node["floating"] == "user_on"
        tiled = not floating and app_name != HELLO_WAYLAND_WINDOW_NAME
        return Node(workspace, node_id, app_name, win_name, False, width, height, max_width, max_height, y, floating, tiled)


def swaymsg_focus_or_create_workspace(workspace_id):
    os.system("swaymsg workspace {0}".format(workspace_id))


def swaymsg_hide_tiled_node(node_id):
    os.system("swaymsg '[con_id={0}]' move scratchpad".format(node_id))


def swaymsg_toggle_hidden(node_id):
    os.system("swaymsg '[con_id={0}]' scratchpad show".format(node_id))


def swaymsg_focus_on_node(node_id):
    os.system("swaymsg '[con_id={0}]' focus".format(node_id))


def swaymsg_move_node_to_workspace(node_id, workspace_id):
    os.system("swaymsg '[con_id={0}]' move container to workspace {1}, workspace {1}".format(node_id, workspace_id))


def find_node_by_name(node_info, name):
    target_node = [i for i in node_info.nodes if i.name == name]
    if len(target_node) == 0:
        return None
    return target_node[0]


def get_nested_nodes(node):
    return node["floating_nodes"] + node["nodes"]


def dict_to_node_info(node_tree_dict):
    node_info = NodeInfo()
    all_nodes = node_tree_dict["nodes"]
    max_width = -1
    max_height = -1
    for node in all_nodes:
        workspace_nodes = get_nested_nodes(node)
        all_nodes += workspace_nodes
        if node["name"] == "__i3_scratch":
            for hidden_node in workspace_nodes:
                hidden_node_obj = create_node(hidden_node, Workspace())
                node_info.nodes.append(hidden_node_obj)
                node_info.hidden_nodes.append(hidden_node_obj)
            continue
        current_mode = node.get("current_mode")
        if current_mode:
            max_width = current_mode["width"]
            max_height = current_mode["height"]
            continue
        workspace_id = node.get("num")
        if not workspace_id:
            continue
        nodes_in_ws = list()
        tiled_nodes_in_ws = list()
        workspace = Workspace(workspace_id, nodes_in_ws, tiled_nodes_in_ws, -1)
        node_info.workspaces.append(workspace)
        for ws_node in workspace_nodes:
            assert_with_log(max_height != -1 and max_width != -1 and workspace_id != -1, "Unexpected missing node attributes")
            workspace_nodes += get_nested_nodes(ws_node)
            curr_node = create_node(ws_node, workspace, max_width, max_height)
            if curr_node.name == HELLO_WAYLAND_WINDOW_NAME:
                os.system("swaymsg '[con_id={0}]' floating enable".format(curr_node.id))
                workspace.hello_wayland_id = curr_node.id
            elif curr_node.tiled:
                tiled_nodes_in_ws.append(curr_node)
                node_info.tiled_nodes.append(curr_node)
            node_info.nodes.append(curr_node)
            nodes_in_ws.append(curr_node)
            if ws_node["focused"]:
                node_info.curr_node = curr_node
    return node_info


def toggle_maximize(node_info: NodeInfo, default_width_percentage, default_height_percentage, default_x, default_y):
    default_width = int(node_info.curr_node.max_width * (default_width_percentage / 100))
    default_height = int(node_info.curr_node.max_height * (default_height_percentage / 100))
    if node_info.curr_node.width == default_width and node_info.curr_node.height == default_height:
        os.system("swaymsg resize set {0} {1}, move position 0 0".format(node_info.curr_node.max_width, node_info.curr_node.max_height - node_info.curr_node.pos_y))
    else:
        os.system("swaymsg resize set {0} {1}, move position {2} {3}".format(default_width, default_height, default_x, default_y))


def get_tree():
    json_str = subprocess.check_output(["swaymsg", "-t", "get_tree"])
    return json.loads(json_str)


def get_nodes():
    return dict_to_node_info(get_tree())


def find_empty_workspace(node_info):
    for ws in node_info.workspaces:
        if len(ws.tiled_nodes) == 0:
            return ws.id
    return node_info.workspaces[-1].id + 1


def move_to_new_workspace(node_info):
    if not node_info.curr_node.tiled:
        return
    if len(node_info.curr_node.workspace.tiled_nodes) > 1:
        next_workspace = find_empty_workspace(node_info)
    else:
        next_workspace = node_info.workspaces[0].id
    swaymsg_move_node_to_workspace(node_info.curr_node.id, next_workspace)


def next_workspace(node_info):
    if not node_info.curr_node.tiled:
        swaymsg_toggle_hidden(node_info.curr_node.id)
    if node_info.curr_node.workspace.id != node_info.workspaces[-1].id:
        os.system("swaymsg workspace next")


def prev_workspace(node_info):
    if not node_info.curr_node.tiled:
        swaymsg_toggle_hidden(node_info.curr_node.id)
    if node_info.curr_node.workspace.id != node_info.workspaces[0].id:
        os.system("swaymsg workspace prev")


def next_node(node_info: NodeInfo):
    if not node_info.curr_node.tiled:
        swaymsg_toggle_hidden(node_info.curr_node.id)
    nodes = node_info.tiled_nodes
    for index, node in enumerate(nodes):
        if node.id == node_info.curr_node.id:
            try:
                return nodes[index + 1].id
            except:
                return nodes[0].id
    return nodes[0].id


def next_node_in_the_same_workspace(node_info: NodeInfo):
    if not node_info.curr_node.tiled:
        return
    nodes = node_info.curr_node.workspace.tiled_nodes
    if len(nodes) < 2:
        return -1
    next_node = 0
    curr_node_id = node_info.curr_node.id
    if nodes[-1].id != node_info.curr_node.id:
        for i in nodes:
            next_node += 1
            if i.id == node_info.curr_node.id:
                break
    return nodes[next_node].id


def toggle_hidden(node_info: NodeInfo, name, cmd):
    target_node = find_node_by_name(node_info, name)
    if not target_node:
        os.system(cmd)
    if target_node.tiled:
        swaymsg_hide_tiled_node(target_node.id)
    else:
        swaymsg_toggle_hidden(target_node.id)


def to_app(node_info: NodeInfo, name):
    target_node = find_node_by_name(node_info, name)
    if not target_node:
        return
    if not node_info.curr_node.tiled:
        swaymsg_toggle_hidden(node_info.curr_node.id)
    swaymsg_focus_on_node(target_node.id)


def keep_minimum_workspaces(node_info: NodeInfo, min_ws):
    fake_empty_workspaces = list()
    for ws in node_info.workspaces:
        if len(ws.tiled_nodes) == 0:
            fake_empty_workspaces.append(ws)
    if len(fake_empty_workspaces) < min_ws:
        os.system("swaymsg workspace {0}, exec hello-wayland".format(node_info.workspaces[-1].id + 1))
        swaymsg_focus_or_create_workspace(node_info.curr_node.workspace.id)
    elif len(fake_empty_workspaces) > min_ws:
        counter = 0
        for empty_ws in fake_empty_workspaces:
            if counter < min_ws:
                os.system("swaymsg '[con_id={0}]' kill".format(empty_ws.hello_wayland_id))
            counter = counter + 1


def move_node_to_workspace(node_info: NodeInfo, target_index):
    for index, workspace in enumerate(node_info.workspaces):
        if index == int(target_index):
            swaymsg_move_node_to_workspace(node_info.curr_node.id, workspace.id)
            return


def prompt_app_switcher(node_info: NodeInfo):
    str_list = ""
    app_dict = {}
    for idx, node in enumerate(node_info.nodes):
        app_dict[idx] = node
        if node.workspace.hello_wayland_id != node.id:
            str_list += "{0}\n".format(node.window_name)
    fuzzel_cmd = "fuzzel -l {0} --index --no-run-if-empty -d".format(str_list.count('\n'))
    maybe_id = int(subprocess.check_output(fuzzel_cmd.split(), input=str_list, text=True))
    if not node_info.curr_node.tiled:
        swaymsg_toggle_hidden(node_info.curr_node.id)
    swaymsg_focus_on_node(app_dict[maybe_id].id)


if __name__ == "__main__":
    argc = len(sys.argv)
    if argc >= 2:
        if sys.argv[1] == "stdin":
            stdin = sys.stdin.readlines()[0]
            msg = json.loads(stdin)
            action = msg["change"]
            if action == "focus" and msg["container"]["app_id"] != HELLO_WAYLAND_WINDOW_NAME:
                keep_minimum_workspaces(get_nodes(), 1)
        elif sys.argv[1] == "to-workspace":
            move_node_to_workspace(get_nodes(), sys.argv[2])
        elif sys.argv[1] == "to-app":
            to_app(get_nodes(), sys.argv[2])
        elif sys.argv[1] == "next":
            next_workspace(get_nodes())
        elif sys.argv[1] == "prev":
            prev_workspace(get_nodes())
        elif sys.argv[1] == "toggle-focus":
            os.system("swaymsg '[con_id={0}]' focus".format(next_node(get_nodes())))
        elif sys.argv[1] == "swap":
            os.system("swaymsg swap container with con_id {0}".format(next_node_in_the_same_workspace(get_nodes())))
        elif sys.argv[1] == "toggle-hidden":
            toggle_hidden(get_nodes(), sys.argv[2], sys.argv[3])
        elif sys.argv[1] == "toggle-maximize":
            toggle_maximize(get_nodes(), int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4]), int(sys.argv[5]))
        elif sys.argv[1] == "app-switcher":
            prompt_app_switcher(get_nodes())
    else:
        move_to_new_workspace(get_nodes())
