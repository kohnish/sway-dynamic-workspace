#!/usr/bin/env python3
from dataclasses import dataclass
import json
import subprocess
import os
import sys


@dataclass
class Node:
    id: int
    workspace_id: int


@dataclass
class NodeInfo:
    curr_node: int
    curr_workspace: int
    nodes: list
    workspaces: list


def get_current_node_info(node_tree_dict):
    node_info = NodeInfo(-1, -1, [], [])
    all_nodes = node_tree_dict["nodes"]
    for node in all_nodes:
        if node.get("num"):
            node_info.workspaces.append(node["num"])
            workspace_nodes = node["nodes"] + node["floating_nodes"]
            for ws_node in workspace_nodes:
                workspace_nodes += ws_node["nodes"] + ws_node["floating_nodes"]
                if ws_node.get("visible"):
                    node_info.nodes.append(Node(ws_node["id"], node["num"]))
                    if ws_node["focused"]:
                        node_info.curr_node = ws_node["id"]
                        node_info.curr_workspace = node["num"]
        all_nodes += node["nodes"] + node["floating_nodes"]
    return node_info


def get_tree():
    json_str = subprocess.check_output(["swaymsg", "-t", "get_tree"])
    return json.loads(json_str)


def maximize():
    node_info = get_current_node_info(get_tree())
    if node_info.curr_workspace != node_info.workspaces[0]:
        next_workspace = node_info.workspaces[0]
    else:
        next_workspace = node_info.workspaces[-1] + 1

    os.system("swaymsg [con_id={0}] move container to workspace {1}, workspace {1}".format(node_info.curr_node, next_workspace))


def next_or_new_workspace():
    node_info = get_current_node_info(get_tree())
    if node_info.curr_workspace != -1:
        if node_info.curr_workspace == node_info.workspaces[-1]:
            os.system("swaymsg workspace {0}".format(node_info.workspaces[-1] + 1))
        else:
            os.system("swaymsg workspace next")


def prev_workspace():
    node_info = get_current_node_info(get_tree())
    if node_info.curr_workspace != node_info.workspaces[0]:
        os.system("swaymsg workspace prev")


def next_node():
    node_info = get_current_node_info(get_tree())
    nodes_on_ws = [i.id for i in node_info.nodes if i.workspace_id == node_info.curr_workspace]
    if len(nodes_on_ws) < 2:
        return -1

    next_node = 0
    if nodes_on_ws[-1] != node_info.curr_node:
        for i in nodes_on_ws:
            next_node += 1
            if i == node_info.curr_node:
                break
    return nodes_on_ws[next_node]


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "next":
            next_or_new_workspace()
        elif sys.argv[1] == "prev":
            prev_workspace()
        elif sys.argv[1] == "toggle-focus":
            os.system("swaymsg [con_id={0}] focus".format(next_node()))
        elif sys.argv[1] == "swap":
            os.system("swaymsg swap container with con_id {}".format(next_node()))
    else:
        maximize()

