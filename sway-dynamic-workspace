#!/usr/bin/env python3
from dataclasses import dataclass, field
import json
import subprocess
import os
import sys
from collections import OrderedDict

HELLO_WAYLAND_WINDOW_NAME = "blank"


@dataclass
class Workspace:
    pass


@dataclass
class Node:
    workspace: Workspace = field(default_factory=lambda: Workspace())
    id: int = -1
    name: str = ""
    window_name: str = ""
    hidden: bool = False
    width: int = -1
    height: int = -1
    max_width: int = -1
    max_height: int = -1
    pos_x: int = -1
    pos_y: int = -1
    floating: bool = False
    tiled: bool = False


@dataclass
class Workspace:
    id: int = -1
    tiled_nodes: list[Node] = field(default_factory=list)
    visible_nodes: list[Node] = field(default_factory=list)
    hello_wayland_id: int = -1


@dataclass
class NodeInfo:
    curr_node: Node = field(default_factory=lambda: Node())
    nodes: OrderedDict[str, Node] = field(default_factory=OrderedDict)
    tiled_nodes: list[Node] = field(default_factory=list)
    workspaces: list[Workspace] = field(default_factory=list)


def debug_log(msg):
    os.system("logger sway-dynamic-workspace: DEBUG: {0}".format(msg))


def assert_with_log(cond, msg="Assertion failed"):
    if not cond:
        os.system("logger sway-dynamic-workspace: ERROR: AssertionError: {0}".format(msg))
        raise AssertionError(msg)


def app_and_win_name_from_node(node):
    app_name = node.get("app_id")
    win_name = node.get("name")
    if not app_name or app_name == "":
        wp = node.get("window_properties")
        if wp:
            app_name = wp.get("class")
            if not app_name or app_name == "":
                app_name = win_name
    if not app_name or app_name == "":
        app_name = "untitled-{}".format(node.get("pid"))
    return app_name, win_name


def create_node(node, workspace, max_width=-1, max_height=-1):
    app_name, win_name = app_and_win_name_from_node(node)
    node_id = node["id"]
    width = node["rect"]["width"]
    height = node["rect"]["height"]
    if workspace.id == -1:
        return Node(workspace=workspace, id=node_id, name=app_name, window_name=win_name, hidden=True)
    else:
        x = node["rect"]["x"]
        y = node["rect"]["y"]
        floating = node["floating"] == "user_on"
        tiled = not floating and app_name != HELLO_WAYLAND_WINDOW_NAME
        return Node(workspace, node_id, app_name, win_name, False, width, height, max_width, max_height, x, y, floating, tiled)


def swaymsg_hide_node(node):
    if node.name == HELLO_WAYLAND_WINDOW_NAME:
        return
    assert_with_log(not node.hidden, "Call this only on shown node")
    os.system("swaymsg '[con_id={0}]' move scratchpad".format(node.id))


def swaymsg_unhide_node(node):
    if node.name == HELLO_WAYLAND_WINDOW_NAME:
        return
    assert_with_log(node.hidden, "Call this only on unhide")
    os.system("swaymsg '[con_id={0}]' scratchpad show".format(node.id))


def swaymsg_focus_on_node(node):
    if node.name == HELLO_WAYLAND_WINDOW_NAME:
        return
    os.system("swaymsg '[con_id={0}]' focus".format(node.id))


def swaymsg_move_node_to_workspace(node, workspace_id):
    if node.name == HELLO_WAYLAND_WINDOW_NAME:
        return
    os.system("swaymsg '[con_id={0}]' move container to workspace {1}, workspace {1}".format(node.id, workspace_id))


def get_nested_nodes(node):
    return node["floating_nodes"] + node["nodes"]


def dict_to_node_info(node_tree_dict):
    node_info = NodeInfo()
    all_nodes = node_tree_dict["nodes"]
    current_disp = node_tree_dict["rect"]
    max_width = current_disp["width"]
    max_height = current_disp["height"]
    for node in all_nodes:
        workspace_nodes = get_nested_nodes(node)
        all_nodes += workspace_nodes
        if node["name"] == "__i3_scratch":
            for hidden_node in workspace_nodes:
                hidden_node_obj = create_node(hidden_node, Workspace())
                node_info.nodes[hidden_node_obj.name] = hidden_node_obj
            continue
        workspace_id = node.get("num")
        if not workspace_id:
            continue
        workspace = Workspace(id=workspace_id)
        node_info.workspaces.append(workspace)
        for ws_node in workspace_nodes:
            workspace_nodes += get_nested_nodes(ws_node)
            curr_node = create_node(ws_node, workspace, max_width, max_height)
            if curr_node.name == HELLO_WAYLAND_WINDOW_NAME:
                workspace.hello_wayland_id = curr_node.id
            else:
                workspace.visible_nodes.append(curr_node)
                node_info.nodes[curr_node.name] = curr_node
                if curr_node.tiled:
                    workspace.tiled_nodes.append(curr_node)
                    node_info.tiled_nodes.append(curr_node)
            if ws_node["focused"]:
                node_info.curr_node = curr_node
    return node_info


def toggle_maximize(node_info: NodeInfo, default_width_percentage, default_height_percentage, default_x, default_y):
    default_width = int(node_info.curr_node.max_width * (default_width_percentage / 100))
    default_height = int(node_info.curr_node.max_height * (default_height_percentage / 100))
    if node_info.curr_node.width == default_width and node_info.curr_node.height == default_height:
        os.system("swaymsg resize set {0} {1}, move position 0 0".format(node_info.curr_node.max_width - node_info.curr_node.pos_x, node_info.curr_node.max_height - node_info.curr_node.pos_y))
    else:
        os.system("swaymsg resize set {0} {1}, move position {2} {3}".format(default_width, default_height, default_x, default_y))


def get_nodes():
    json_str = subprocess.check_output(["swaymsg", "-t", "get_tree"])
    return dict_to_node_info(json.loads(json_str))


def find_empty_workspace(node_info):
    for ws in node_info.workspaces:
        if len(ws.tiled_nodes) == 0:
            return ws.id
    return node_info.workspaces[-1].id + 1


def move_to_new_workspace(node_info):
    if not node_info.curr_node.tiled:
        return
    if len(node_info.curr_node.workspace.tiled_nodes) > 1:
        next_workspace = find_empty_workspace(node_info)
    else:
        next_workspace = node_info.workspaces[0].id
    swaymsg_move_node_to_workspace(node_info.curr_node, next_workspace)


def next_workspace(node_info):
    if not node_info.curr_node.tiled:
        swaymsg_hide_node(node_info.curr_node)
    if node_info.curr_node.workspace.id != node_info.workspaces[-1].id:
        os.system("swaymsg workspace next")


def prev_workspace(node_info):
    if not node_info.curr_node.tiled:
        swaymsg_hide_node(node_info.curr_node)
    if node_info.curr_node.workspace.id != node_info.workspaces[0].id:
        os.system("swaymsg workspace prev")


def next_node(node_info: NodeInfo):
    if not node_info.curr_node.tiled:
        swaymsg_hide_node(node_info.curr_node)
    nodes = node_info.tiled_nodes
    for index, node in enumerate(nodes):
        if node.id == node_info.curr_node.id:
            try:
                return nodes[index + 1].id
            except:
                return nodes[0].id
    return nodes[0].id


def next_node_in_the_same_workspace(node_info: NodeInfo):
    if not node_info.curr_node.tiled:
        return
    nodes = node_info.curr_node.workspace.tiled_nodes
    if len(nodes) < 2:
        return -1
    next_node = 0
    curr_node_id = node_info.curr_node.id
    if nodes[-1].id != node_info.curr_node.id:
        for i in nodes:
            next_node += 1
            if i.id == node_info.curr_node.id:
                break
    return nodes[next_node].id


def toggle_hidden(node_info: NodeInfo, name, cmd):
    target_node = node_info.nodes.get(name)
    if not target_node:
        os.system(cmd)
        return
    if node_info.curr_node.id == target_node.id:
        swaymsg_hide_node(target_node)
    else:
        if target_node.hidden:
            swaymsg_unhide_node(target_node)
        else:
            swaymsg_focus_on_node(target_node)


def to_app(node_info: NodeInfo, name):
    target_node = node_info.nodes.get(name)
    if not target_node:
        return
    if not node_info.curr_node.tiled:
        swaymsg_hide_node(node_info.curr_node)
    swaymsg_focus_on_node(target_node)


def keep_minimum_workspaces(node_info: NodeInfo):
    minimum_empty_ws_num = 1
    fake_empty_workspaces = list()
    for ws in node_info.workspaces:
        if len(ws.visible_nodes) == 0:
            fake_empty_workspaces.append(ws)
    if len(fake_empty_workspaces) < minimum_empty_ws_num:
        os.system("swaymsg workspace {0}, exec hello-wayland, workspace {1}".format(node_info.workspaces[-1].id + 1, node_info.curr_node.workspace.id))
    elif len(fake_empty_workspaces) > minimum_empty_ws_num:
        for idx, empty_ws in enumerate(fake_empty_workspaces):
            if idx < minimum_empty_ws_num:
                os.system("swaymsg '[con_id={0}]' kill".format(empty_ws.hello_wayland_id))
            else:
                break


def move_node_to_workspace(node_info: NodeInfo, target_index):
    for index, workspace in enumerate(node_info.workspaces):
        if index == int(target_index):
            swaymsg_move_node_to_workspace(node_info.curr_node, workspace.id)
            return


def prompt_app_switcher(node_info: NodeInfo):
    str_list = ""
    for _, node in node_info.nodes.items():
        app_name_orig = ""
        app_name = ""
        win_name = ""
        if node.name!= node.window_name:
            app_name_last = node.name.split(".")[-1]
            if app_name_last != None:
                app_name_orig = app_name_last
        if node.window_name != None and app_name_orig.lower() not in node.window_name.lower():
            win_name = node.window_name
            app_name = app_name_orig + " - "
        else:
            app_name = app_name_orig
        str_list += "{0}{1}\n".format(app_name, win_name)
    fuzzel_cmd = "fuzzel -l {0} --index --no-run-if-empty -d".format(str_list.count('\n'))
    chosen_idx = int(subprocess.check_output(fuzzel_cmd.split(), input=str_list, text=True))
    if not node_info.curr_node.tiled:
        swaymsg_hide_node(node_info.curr_node)
    swaymsg_focus_on_node(list(node_info.nodes.values())[chosen_idx])


def prompt_app_launcher(node_info: NodeInfo):
    subprocess.check_output(["fuzzel"])
    if not node_info.curr_node.tiled:
        swaymsg_hide_node(node_info.curr_node)


def kill_node(node_info: NodeInfo):
    if node_info.curr_node.workspace.hello_wayland_id == node_info.curr_node.id:
        return
    os.system("swaymsg kill")


def to_scratchpad(node_info: NodeInfo):
    if node_info.curr_node.workspace.hello_wayland_id == node_info.curr_node.id:
        return
    os.system("swaymsg move scratchpad")


if __name__ == "__main__":
    argc = len(sys.argv)
    if argc >= 2:
        if sys.argv[1] == "stdin":
            stdin = sys.stdin.readlines()[0]
            msg = json.loads(stdin)
            action = msg["change"]
            if action == "focus" and msg["container"]["app_id"] != HELLO_WAYLAND_WINDOW_NAME:
                keep_minimum_workspaces(get_nodes())
        elif sys.argv[1] == "to-workspace":
            move_node_to_workspace(get_nodes(), sys.argv[2])
        elif sys.argv[1] == "kill":
            kill_node(get_nodes())
        elif sys.argv[1] == "to-scratchpad":
            to_scratchpad(get_nodes())
        elif sys.argv[1] == "to-app":
            to_app(get_nodes(), sys.argv[2])
        elif sys.argv[1] == "next":
            next_workspace(get_nodes())
        elif sys.argv[1] == "prev":
            prev_workspace(get_nodes())
        elif sys.argv[1] == "toggle-focus":
            os.system("swaymsg '[con_id={0}]' focus".format(next_node(get_nodes())))
        elif sys.argv[1] == "swap":
            os.system("swaymsg swap container with con_id {0}".format(next_node_in_the_same_workspace(get_nodes())))
        elif sys.argv[1] == "toggle-hidden":
            toggle_hidden(get_nodes(), sys.argv[2], sys.argv[3])
        elif sys.argv[1] == "toggle-maximize":
            toggle_maximize(get_nodes(), int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4]), int(sys.argv[5]))
        elif sys.argv[1] == "app-switcher":
            prompt_app_switcher(get_nodes())
        elif sys.argv[1] == "app-launcher":
            prompt_app_launcher(get_nodes())
    else:
        move_to_new_workspace(get_nodes())
