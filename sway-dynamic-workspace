#!/usr/bin/env python3
from dataclasses import dataclass
import json
import subprocess
import os
import sys


@dataclass
class Node:
    id: int
    workspace: int
    name: str
    hidden: bool
    width: int
    height: int

@dataclass
class Workspace:
    id: int
    nodes: list[Node]


@dataclass
class NodeInfo:
    curr_node: Node
    nodes: list[Node]
    workspaces: list[Workspace]


def dict_to_node_info(node_tree_dict):
    node_info = NodeInfo(Node(-1, -1, "", False, -1, -1), [], [])
    all_nodes = node_tree_dict["nodes"]
    for node in all_nodes:
        if node["name"] == "__i3_scratch":
            for hidden_node in node["floating_nodes"] + node["nodes"]:
                node_info.nodes.append(Node(hidden_node["id"], -1, hidden_node["app_id"], True, hidden_node["rect"]["width"], hidden_node["rect"]["height"]))
        all_nodes += node["nodes"] + node["floating_nodes"]
        if node.get("num"):
            workspace_nodes = node["nodes"] + node["floating_nodes"]
            current_nodes_list = list()
            node_info.workspaces.append(Workspace(node["num"], current_nodes_list))
            for ws_node in workspace_nodes:
                app_id = ""
                if ws_node.get("app_id"):
                    app_id = ws_node["app_id"]
                elif ws_node.get("window_properties"):
                    app_id = ws_node["window_properties"]["class"]

                curr_node = Node(ws_node["id"], node["num"], app_id, False, ws_node["rect"]["width"], ws_node["rect"]["height"])
                node_info.nodes.append(curr_node)
                current_nodes_list.append(curr_node)
                if ws_node["focused"]:
                    node_info.curr_node = curr_node
    return node_info


def toggle_maximize(node_info: NodeInfo, default_width, default_height, default_x, default_y, max_width, max_height):
    if node_info.curr_node.width == default_width and node_info.curr_node.height == default_height:
        os.system("swaymsg resize set {0} {1}, move position 0 0".format(max_width, max_height))
    else:
        os.system("swaymsg resize set {0} {1}, move position {2} {3}".format(default_width, default_height, default_x, default_y))


def get_tree():
    json_str = subprocess.check_output(["swaymsg", "-t", "get_tree"])
    return json.loads(json_str)


def get_nodes():
    return dict_to_node_info(get_tree())


def find_empty_workspace(node_info):
    fake_empty_workspaces = list()
    if len(node_info.workspaces) == 1:
        return 2
    for ws in node_info.workspaces:
        blank_nodes = list()
        non_blank_nodes = list()
        for node in ws.nodes:
            if node.name == "blank":
                blank_nodes.append(node)
            elif node.hidden == False:
                non_blank_nodes.append(node)
        if len(blank_nodes) > 0 and len(non_blank_nodes) == 0:
            fake_empty_workspaces.append(ws)
    if len(fake_empty_workspaces) > 0:
        return fake_empty_workspaces[0].id
    else:
        return node_info.workspaces[-1].id + 1


def move_to_new_workspace(node_info):
    if node_info.curr_node.name == "blank":
        return
    workspaces = [i.id for i in node_info.workspaces]
    if node_info.curr_node.workspace != workspaces[0]:
        next_workspace = workspaces[0]
    else:
        next_workspace = find_empty_workspace(node_info)
    os.system("swaymsg '[con_id={0}]' move container to workspace {1}, workspace {1}".format(node_info.curr_node.id, next_workspace))


def next_or_new_workspace(node_info):
    workspaces = [i.id for i in node_info.workspaces]
    if node_info.curr_node.workspace != -1 and node_info.curr_node.workspace != workspaces[-1]:
        os.system("swaymsg workspace next")
        return
    os.system("swaymsg workspace {0}".format(workspaces[-1] + 1))


def prev_workspace(node_info):
    workspaces = [i.id for i in node_info.workspaces]
    if node_info.curr_node.workspace != workspaces[0]:
        os.system("swaymsg workspace prev")


def next_node(node_info: NodeInfo):
    nodes = [i.id for i in node_info.nodes if i.workspace == node_info.curr_node.workspace]
    if len(nodes) < 2:
        return -1
    next_node = 0
    curr_node_id = node_info.curr_node.id
    if nodes[-1] != node_info.curr_node.id:
        for i in nodes:
            next_node += 1
            if i == node_info.curr_node.id:
                break
    return nodes[next_node]


def toggle_hidden(node_info: NodeInfo, name, cmd):
    target_node = [i for i in node_info.nodes if i.name == name]
    if len(target_node) == 0:
        os.system("{0}".format(cmd))
    else:
        if target_node[0].hidden:
            os.system("swaymsg '[con_id={0}]' scratchpad show".format(target_node[0].id))
        else:
            os.system("swaymsg '[con_id={0}]' move scratchpad".format(target_node[0].id))


def keep_minimum_workspaces(node_info: NodeInfo, min_ws):
    fake_empty_workspaces = list()
    for ws in node_info.workspaces:
        blank_nodes = list()
        non_blank_nodes = list()
        for node in ws.nodes:
            if node.name == "blank":
                blank_nodes.append(node)
            elif node.hidden == False:
                non_blank_nodes.append(node)
        if len(blank_nodes) > 0 and len(non_blank_nodes) == 0:
            fake_empty_workspaces.append(ws)

    if len(fake_empty_workspaces) < min_ws:
        os.system("swaymsg workspace {0}, exec hello-wayland".format(node_info.workspaces[-1].id + 1))
        os.system("swaymsg workspace {0}".format(node_info.curr_node.workspace))
    elif len(fake_empty_workspaces) > min_ws:
        counter = 0
        for empty_ws in fake_empty_workspaces:
            if counter >= min_ws:
                for empty_node in empty_ws.nodes:
                    os.system("swaymsg [con_id={0}] kill".format(empty_node.id))
            counter = counter + 1


if __name__ == "__main__":
    argc = len(sys.argv)
    if argc == 2:
        if sys.argv[1] == "stdin":
            stdin = sys.stdin.readlines()[0]
            msg = json.loads(stdin)
            action = msg["change"]
            if action in ["new", "focus"] and msg["container"]["app_id"] != "blank":
                keep_minimum_workspaces(get_nodes(), 1)
        elif sys.argv[1] == "next":
            next_or_new_workspace(get_nodes())
        elif sys.argv[1] == "prev":
            prev_workspace(get_nodes())
        elif sys.argv[1] == "toggle-focus":
            os.system("swaymsg '[con_id={0}]' focus".format(next_node(get_nodes())))
        elif sys.argv[1] == "swap":
            os.system("swaymsg swap container with con_id {0}".format(next_node(get_nodes())))
    elif argc == 4:
        if sys.argv[1] == "toggle-hidden":
            toggle_hidden(get_nodes(), sys.argv[2], sys.argv[3])
    elif argc == 8:
        if sys.argv[1] == "toggle-maximize":
            toggle_maximize(get_nodes(), int(sys.argv[2]), int(sys.argv[3]), int(sys.argv[4]), int(sys.argv[5]), int(sys.argv[6]), int(sys.argv[7]))
    else:
        move_to_new_workspace(get_nodes())
