#!/usr/bin/env python3
from dataclasses import dataclass
import json
import subprocess
import os
import sys


@dataclass
class Node:
    node_id: int
    workspace_id: int


@dataclass
class NodeInfo:
    current_node_id: int
    current_workspace_id: int
    nodes: list
    workspace_ids: list


def get_current_node_info(node_tree_dict):
    node_info = NodeInfo(-1, -1, list(), list())
    current_workspace_id = -1
    node_trees = []
    node_trees.append(node_tree_dict["nodes"])
    workspace_nodes = []
    for node_list in node_trees:
        for node in node_list:
            if node.get("num"):
                node_info.workspace_ids.append(node["num"])
                for workspace_node_list in [node["nodes"] + node["floating_nodes"]] :
                    for work_node in workspace_node_list:
                        if work_node.get("nodes"):
                            workspace_node_list.append(work_node["nodes"])
                        if work_node.get("floating_nodes"):
                            workspace_node_list.append(work_node["floating_nodes"])

                        if (work_node["focused"] == True):
                            node_info.current_node_id = work_node["id"]
                            node_info.current_workspace_id = node["num"]
                        if work_node["type"] != "workspace":
                            node_info.nodes.append(Node(work_node["id"], node["num"]))
            if node.get("nodes"):
                node_trees.append(node["nodes"])
            if node.get("floating_nodes"):
                node_trees.append(node["floating_nodes"])
    return node_info


def get_tree():
    json_str = subprocess.check_output(["swaymsg", "-t", "get_tree"])
    return json.loads(json_str)


def maximize():
    node_info = get_current_node_info(get_tree())
    if node_info.current_workspace_id != node_info.workspace_ids[0]:
        next_workspace = node_info.workspace_ids[0]
    else:
        next_workspace = node_info.workspace_ids[-1] + 1

    cmd = "swaymsg [con_id={0}] move container to workspace {1}, workspace {1}".format(node_info.current_node_id, next_workspace)
    os.system(cmd)


def next_or_new_workspace():
    node_info = get_current_node_info(get_tree())
    if node_info.current_workspace_id != -1:
        if node_info.current_workspace_id == node_info.workspace_ids[-1]:
            os.system("swaymsg workspace {0}".format(node_info.workspace_ids[-1] + 1))
        else:
            os.system("swaymsg workspace next")


def prev_workspace():
    node_info = get_current_node_info(get_tree())
    if node_info.current_workspace_id != node_info.workspace_ids[0]:
        os.system("swaymsg workspace prev")


def next_node():
    node_info = get_current_node_info(get_tree())
    nodes_on_ws = [i.node_id for i in node_info.nodes if i.workspace_id == node_info.current_workspace_id]
    if len(nodes_on_ws) < 2:
        return -1

    next_node = 0
    if nodes_on_ws[-1] != node_info.current_node_id:
        for i in nodes_on_ws:
            next_node += 1
            if i == node_info.current_node_id:
                break
    return nodes_on_ws[next_node]


if __name__ == "__main__":
    if len(sys.argv) > 1:
        if sys.argv[1] == "next":
            next_or_new_workspace()
        elif sys.argv[1] == "prev":
            prev_workspace()
        elif sys.argv[1] == "toggle-focus":
            os.system("swaymsg [con_id={0}] focus".format(next_node()))
        elif sys.argv[1] == "swap":
            os.system("swaymsg swap container with con_id {}".format(next_node()))
    else:
        maximize()

